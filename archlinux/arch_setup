#!/bin/bash

################################################
##### Time
################################################

# References:
# https://wiki.archlinux.org/title/System_time#Time_zone
# https://wiki.archlinux.org/title/Systemd-timesyncd

# Enable systemd-timesyncd
systemctl enable systemd-timesyncd.service

# Set timezone
ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime
hwclock --systohc --utc

################################################
##### Locale and keymap
################################################

# Set locale
echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
echo "LANG=\"en_US.UTF-8\"" > /etc/locale.conf
echo "LC_ALL=C" >> /etc/locale.conf
locale-gen

# Set keymap
echo "KEYMAP=us" > /etc/vconsole.conf

################################################
##### Hostname
################################################

# Set hostname
echo ${NEW_HOSTNAME} > /etc/hostname

# Set /etc/hosts
tee /etc/hosts << EOF
127.0.0.1 localhost
::1 localhost
127.0.1.1 ${NEW_HOSTNAME}.localdomain ${NEW_HOSTNAME}
EOF

################################################
##### Pacman
################################################

# References:
# https://wiki.archlinux.org/title/Pacman/Package_signing#Initializing_the_keyring

# Force pacman to refresh the package lists
pacman -Syy

# Initialize Pacman's keyring
pacman-key --init
pacman-key --populate

# Configure Pacman
sed -i "s|^#Color|Color|g" /etc/pacman.conf
sed -i "s|^#VerbosePkgLists|VerbosePkgLists|g" /etc/pacman.conf
sed -i "s|^#ParallelDownloads.*|ParallelDownloads = 5|g" /etc/pacman.conf
sed -i "/ParallelDownloads = 5/a ILoveCandy" /etc/pacman.conf

################################################
##### ZSH and common applications
################################################

# Install ZSH and plugins
#### pacman -S --noconfirm zsh zsh-completions grml-zsh-config zsh-autosuggestions zsh-syntax-highlighting
pacmac -S --noconfirm zsh

# Install common applications
pacman -S --noconfirm \
    git \
    ripgrep \
    wget \
    openssh \
    fwupd \
    zstd \
    man-db \
    man-pages \
    e2fsprogs \
    util-linux \
    lzop \
    wireguard-tools \
    htop \
    p7zip \
    unzip \
    unrar \
    lm_sensors \
    upower \
    rsync

################################################
##### Swap
################################################

# References:
# https://wiki.archlinux.org/title/swap#Swappiness
# https://wiki.archlinux.org/title/Improving_performance#zram_or_zswap
# https://wiki.gentoo.org/wiki/Zram
# https://www.dwarmstrong.org/zram-swap/
# https://www.reddit.com/r/Fedora/comments/mzun99/new_zram_tuning_benchmarks/

# Set page cluster
echo 'vm.page-cluster=0' > /etc/sysctl.d/99-page-cluster.conf

# Set swappiness
echo 'vm.swappiness=100' > /etc/sysctl.d/99-swappiness.conf

# Set dirty background ratio
echo 'vm.dirty_background_ratio=1' > /etc/sysctl.d/99-dirty-background-ratio.conf

# Set dirty ratio
echo 'vm.dirty_ratio=50' > /etc/sysctl.d/99-dirty-ratio.conf

# Set VFS cache pressure
echo 'vm.vfs_cache_pressure=500' > /etc/sysctl.d/99-vfs-cache-pressure.conf

# Configure and enable zram
tee /etc/systemd/system/dev-zram0.service << EOF
[Unit]
Description=Start zram
After=local-fs.target

[Service]
Type=oneshot
ExecStart=/usr/bin/modprobe zram
ExecStart=/usr/bin/sh -c "echo zstd > /sys/block/zram0/comp_algorithm"
ExecStart=/usr/bin/sh -c "echo 8G > /sys/block/zram0/disksize"
ExecStart=/usr/bin/mkswap --label zram0 /dev/zram0
ExecStart=/usr/bin/swapon --priority 100 /dev/zram0

[Install]
WantedBy=multi-user.target
EOF

systemctl enable dev-zram0.service

################################################
##### SSD
################################################

# References:
# https://wiki.archlinux.org/title/Solid_state_drive

# Enable periodic TRIM
systemctl enable fstrim.timer

################################################
##### Users
################################################

# References:
# https://wiki.archlinux.org/title/XDG_Base_Directory

# Set root password
echo "root:${NEW_USER_PASSWORD}" | chpasswd

# Setup user
useradd -m -G wheel -s /usr/bin/zsh ${NEW_USER}
echo "${NEW_USER}:${NEW_USER_PASSWORD}" | chpasswd
echo "%wheel ALL=(ALL:ALL) NOPASSWD:ALL" >> /etc/sudoers

# Create XDG user directories
pacman -S --noconfirm xdg-user-dirs
sudo -u ${NEW_USER} xdg-user-dirs-update

# Create common directories
mkdir -p /home/${NEW_USER}/{.ssh,src,.local/share/applications}
chown 700 /home/${NEW_USER}/.ssh

################################################
##### Networking
################################################

# References:
# https://wiki.archlinux.org/title/NetworkManager#Using_iwd_as_the_Wi-Fi_backend
# https://wiki.archlinux.org/title/Firewalld
# https://wiki.archlinux.org/title/nftables

# Install and configure firewalld
pacman -S --noconfirm firewalld
systemctl enable firewalld.service
firewall-offline-cmd --set-default-zone=block

# Install and configure iwd and NetworkManager
pacman -S --noconfirm iwd networkmanager

tee /etc/NetworkManager/conf.d/wifi_backend.conf << EOF
[device]
wifi.backend=iwd
EOF

systemctl enable NetworkManager.service

# Install bind tools
pacman -S --noconfirm bind

# Install nftables
pacman -S --noconfirm iptables-nft

################################################
##### initramfs
################################################

# Configure mkinitcpio
sed -i "s|MODULES=()|MODULES=(btrfs${MKINITCPIO_MODULES})|" /etc/mkinitcpio.conf
sed -i "s|^HOOKS.*|HOOKS=(systemd autodetect keyboard sd-vconsole modconf block sd-encrypt filesystems fsck)|" /etc/mkinitcpio.conf
sed -i "s|#COMPRESSION=\"zstd\"|COMPRESSION=\"zstd\"|" /etc/mkinitcpio.conf

# Re-create initramfs image
mkinitcpio -P

################################################
##### GRUB
################################################

# References:
# https://wiki.archlinux.org/title/GRUB
# https://wiki.archlinux.org/title/Kernel_parameters#GRUB
# https://wiki.archlinux.org/title/GRUB/Tips_and_tricks#Password_protection_of_GRUB_menu
# https://www.gnu.org/software/grub/manual/grub/grub.html
# https://archlinux.org/news/grub-bootloader-upgrade-and-configuration-incompatibilities/
# https://wiki.archlinux.org/title/silent_boot

# Install GRUB packages
pacman -S --noconfirm grub efibootmgr

# Configure GRUB
sed -i "s|^GRUB_DEFAULT=.*|GRUB_DEFAULT=\"2\"|g" /etc/default/grub
sed -i "s|^GRUB_TIMEOUT=.*|GRUB_TIMEOUT=1|g" /etc/default/grub
sed -i "s|^GRUB_CMDLINE_LINUX_DEFAULT=.*|GRUB_CMDLINE_LINUX_DEFAULT=\"\"|g" /etc/default/grub
#### sed -i "s|^GRUB_CMDLINE_LINUX=.*|GRUB_CMDLINE_LINUX=\"rd.luks.name=$(blkid -s UUID -o value /dev/nvme0n1p2)=cryptdev nvidia_drm.modeset=1 nmi_watchdog=0 rw quiet splash\"|g" /etc/default/grub
sed -i "s|^GRUB_CMDLINE_LINUX=.*|GRUB_CMDLINE_LINUX=\"rd.luks.name=$(blkid -s UUID -o value /dev/nvme0n1p2)=cryptdev nmi_watchdog=0 rw quiet splash\"|g" /etc/default/grub
sed -i "s|^GRUB_PRELOAD_MODULES=.*|GRUB_PRELOAD_MODULES=\"part_gpt part_msdos luks2\"|g" /etc/default/grub
sed -i "s|^GRUB_TIMEOUT_STYLE=.*|GRUB_TIMEOUT_STYLE=hidden|g" /etc/default/grub
sed -i "s|^#GRUB_ENABLE_CRYPTODISK=.*|GRUB_ENABLE_CRYPTODISK=y|g" /etc/default/grub
sed -i "s|^#GRUB_DISABLE_SUBMENU=.*|GRUB_DISABLE_SUBMENU=y|g" /etc/default/grub

# Install GRUB
grub-install --target=x86_64-efi --efi-directory=/boot --boot-directory=/boot --bootloader-id=GRUB

# Password protect GRUB editing, but make menu unrestricted
GRUB_PASSWORD_HASH=$(echo -e "${LUKS_PASSWORD}\n${LUKS_PASSWORD}" | LC_ALL=C /usr/bin/grub-mkpasswd-pbkdf2 | awk '/hash of / {print $NF}')

chmod o-r /etc/grub.d/40_custom

tee -a /etc/grub.d/40_custom << EOF

# Password protect GRUB menu
set superusers="${NEW_USER}"
password_pbkdf2 ${NEW_USER} ${GRUB_PASSWORD_HASH}
EOF

sed -i "s|CLASS=\"--class gnu-linux --class gnu --class os.*\"|CLASS=\"--class gnu-linux --class gnu --class os --unrestricted\"|g" /etc/grub.d/10_linux

# Do not display 'Loading ...' messages
sed -i '/Loading initial ramdisk/d' /etc/grub.d/10_linux
sed -i '/Loading Linux/d' /etc/grub.d/10_linux

# Reduce boot verbosity (silent boot)
sed -i "s|quiet|& loglevel=3 systemd.show_status=auto rd.udev.log_level=3 vt.global_cursor_default=0|" /etc/default/grub

# Generate GRUB's configuration file
grub-mkconfig -o /boot/grub/grub.cfg

# GRUB upgrade hooks
mkdir -p /etc/pacman.d/hooks

tee /etc/pacman.d/hooks/90-grub-unrestricted.hook << EOF
[Trigger]
Type = Package
Operation = Upgrade
Target = grub

[Action]
Description = Adding --unrestricted to GRUB...
When = PostTransaction
Exec = /usr/bin/sed -i "s|CLASS=\"--class gnu-linux --class gnu --class os.*\"|CLASS=\"--class gnu-linux --class gnu --class os --unrestricted\"|g" /etc/grub.d/10_linux
EOF

tee /etc/pacman.d/hooks/91-grub-hide-messages.hook << EOF
[Trigger]
Type = Package
Operation = Upgrade
Target = grub

[Action]
Description = Hiding GRUB boot messages...
When = PostTransaction
Exec = /usr/bin/sh -c "sed -i '/Loading initial ramdisk/d' /etc/grub.d/10_linux; sed -i '/Loading Linux/d' /etc/grub.d/10_linux"
EOF

tee /etc/pacman.d/hooks/92-grub-upgrade.hook << EOF
[Trigger]
Type = Package
Operation = Upgrade
Target = grub

[Action]
Description = Upgrading GRUB...
When = PostTransaction
Exec = /usr/bin/sh -c "grub-install --target=x86_64-efi --efi-directory=/boot --boot-directory=/boot --bootloader-id=GRUB; grub-mkconfig -o /boot/grub/grub.cfg"
EOF

################################################
##### Unlock LUKS with TPM2
################################################

# References:
# https://wiki.archlinux.org/title/Trusted_Platform_Module#systemd-cryptenroll

# Install TPM2-tools
pacman -S --noconfirm tpm2-tools tpm2-tss

# Configure initramfs to unlock the encrypted volume
sed -i "s|=cryptdev|& rd.luks.options=$(blkid -s UUID -o value /dev/nvme0n1p2)=tpm2-device=auto|" /etc/default/grub
grub-mkconfig -o /boot/grub/grub.cfg

################################################
##### Secure boot
################################################

# References:
# https://github.com/Foxboron/sbctl
# https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Using_your_own_keys

# Install sbctl
pacman -S --noconfirm sbctl

# Create secure boot signing keys
sbctl create-keys

# Enroll keys to EFI
sbctl enroll-keys --yes-this-might-brick-my-machine

# Sign files with secure boot keys
sbctl sign -s /boot/EFI/GRUB/grubx64.efi
sbctl sign -s /boot/grub/x86_64-efi/core.efi
sbctl sign -s /boot/grub/x86_64-efi/grub.efi
sbctl sign -s /boot/vmlinuz-linux

################################################
##### thermald
################################################

# Install and enable thermald if CPU is Intel
if [[ $(cat /proc/cpuinfo | grep vendor | uniq) =~ "GenuineIntel" ]]; then
    pacman -S --noconfirm thermald
    systemctl enable thermald.service
fi

################################################
##### Power saving
################################################

# References:
# https://wiki.archlinux.org/title/Power_management

# Disable watchdog
echo 'kernel.nmi_watchdog=0' > /etc/sysctl.d/99-disable-watchdog.conf

# If device is a laptop, apply more power saving configurations
if [[ $(cat /sys/class/dmi/id/chassis_type) -eq 10 ]]; then
    # Reduce VM writeback time
    echo 'vm.dirty_writeback_centisecs=6000' > /etc/sysctl.d/99-vm-writeback-time.conf

    # Rebuild initramfs
    mkinitcpio -P
fi

################################################
##### Paru
################################################

# Install paru
git clone https://aur.archlinux.org/paru-bin.git
chown -R ${NEW_USER}:${NEW_USER} paru-bin
cd paru-bin
sudo -u ${NEW_USER} makepkg -si --noconfirm
cd ..
rm -rf paru-bin

